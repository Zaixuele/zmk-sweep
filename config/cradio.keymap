/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keymap_italian.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// Layer definitions

#define BASE 0
#define SYM 1
#define EXT 2
#define FNC 3
#define SYM2 4
#define ACCENT 5
#define SETTINGS 6

// -----------------

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

&sk {
    ignore-modifiers;
};

/ {
    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.

        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // both right thumb keys
        // internal-left & external-right thumb keys
        // both left thumb keys

        left_1 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            timeout-ms = <30>;
        };

        right_1 {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
            timeout-ms = <30>;
        };

        left_2 {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        right_2 {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        left_3 {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 23>;
            timeout-ms = <30>;
        };

        right_3 {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
            timeout-ms = <30>;
        };

        minus {
            bindings = <&kp UNDER>;
            key-positions = <15 17>;
            timeout-ms = <30>;
        };

        lessthan {
            bindings = <&kp LESS_THAN>;
            key-positions = <25 27>;
            timeout-ms = <30>;
        };

        greater {
            bindings = <&kp GREATER_THAN>;
            key-positions = <25 28>;
            timeout-ms = <30>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
            timeout-ms = <30>;
        };

        backsplash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 5>;
            timeout-ms = <30>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <15 18>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 12 11>;
            timeout-ms = <30>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <5 6>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 4>;
        };

        semi {
            bindings = <&kp SEMI>;
            key-positions = <16 17 18>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <7 8 6>;
        };

        sqt {
            bindings = <&kp SQT>;
            key-positions = <17 18>;
        };

        dqt {
            bindings = <&kp DQT>;
            key-positions = <17 18 26>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <18 19>;
        };

        dot {
            bindings = <&kp DOT>;
            key-positions = <28 29>;
        };
    };

    behaviors {
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            global-quick-tap;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // Base alpha layer

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R  &kp T        &kp Y  &kp U  &kp I      &kp O     &kp P
&kp A  &kp S  &kp D  &kp F  &kp G        &kp H  &kp J  &kp K      &kp L     &kp ENTER
&kp Z  &kp X  &kp C  &kp V  &kp B        &kp N  &kp M  &kp COMMA  &kp FSLH  &kp LEFT_SHIFT
                     &mo 1  &kp SPACE    &mo 4  &mo 2
            >;
        };

        // Numbers and high frequency symbols

        sym_layer {
            bindings = <
&kp N1            &kp N2              &kp N3         &kp N4            &kp N5      &kp N6           &kp N7         &kp N8     &kp N9     &kp N0
&kp LEFT_BRACKET  &kp RIGHT_BRACKET   &kp SEMICOLON  &kp SINGLE_QUOTE  &kp TAB     &kp KP_MULTIPLY  &kp KP_DIVIDE  &kp MINUS  &kp EQUAL  &kp BACKSLASH
&kp LSHFT         &kp LA(LEFT_SHIFT)  &kp LC(SPACE)  &kp LA(SPACE)     &kp LWIN    &kp COMMA        &kp DOT        &kp SLASH  &kp RBKT   &kp RET
                                                     &none             &trans      &trans           &trans
            >;
        };

        // Main modifiers and arrow keys

        ext_layer {
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4      &kp F5     &kp F6      &kp F7         &kp F8        &kp F9        &kp F10
&kp CAPSLOCK  &trans        &kp HOME      &kp END     &kp F11    &kp C_MUTE  &kp C_VOL_DN   &kp C_VOL_UP  &kp UP_ARROW  &kp RIGHT
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &kp F12    &kp PG_UP   &kp PAGE_DOWN  &kp LEFT      &kp DOWN      &kp BSPC
                                          &trans      &trans     &kp C_PP    &trans
            >;
        };

        // Function keys with modifiers

        fnc_layer {
            bindings = <
&kp F1    &kp F2    &kp F3      &kp F4     &kp F5      &kp F6   &kp F7   &kp F8           &kp F9  &kp F10
&sk LALT  &sk LGUI  &sk LSHIFT  &sk LCTRL  &kp RALT    &kp F11  &kp F12  &kp PRINTSCREEN  &trans  &trans
&none     &none     &none       &none      &none       &none    &none    &none            &none   &none
                                &none      &none       &none    &none
            >;
        };

        // Low frequency symbols.

        ctrl_layer {
            bindings = <
&kp ESC    &kp LA(TAB)  &kp IT_PND   &kp IT_EUR   &kp IT_HASH      &kp PAGE_UP    &kp HOME  &kp UP    &kp END    &kp BACKSPACE
&kp LC(A)  &kp LC(S)    &kp IT_BSLH  &kp IT_PIPE  &kp IT_AND       &kp PAGE_DOWN  &kp LEFT  &kp DOWN  &kp RIGHT  &kp DEL
&kp LC(Z)  &kp LC(X)    &kp LC(C)    &kp LC(V)    &kp LA(SPACE)    &none          &none     &none     &none      &none
                                     &none        &none            &none          &none
            >;
        };

        // Used to type regional accents.

        accent_layer {
            bindings = <
&none        &none        &none        &kp IT_CEGR  &none          &none  &none  &none  &none  &none
&kp IT_AGRV  &kp IT_IGRV  &kp IT_OGRV  &kp IT_EGRV  &kp IT_EACU    &none  &none  &none  &none  &none
&none        &none        &none        &kp IT_UGRV  &none          &none  &none  &none  &none  &none
                                       &none        &none          &none  &none
            >;
        };

        // Used to change the keyboard's settings.

        settings_layer {
            bindings = <
&bootloader  &none  &none  &bt BT_CLR  &bt BT_SEL 0    &bt BT_SEL 3  &none  &unstick  &none  &bootloader
&none        &none  &none  &none       &bt BT_SEL 1    &bt BT_SEL 4  &none  &none     &none  &none
&none        &none  &none  &none       &bt BT_SEL 2    &bt BT_SEL 5  &none  &none     &none  &none
                           &none       &none           &none         &none
            >;
        };
    };
};
